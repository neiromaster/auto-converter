$mainScript = "auto-converter.ps1"
$outputFile = "dist/auto-converter.ps1"

$outputDir = Split-Path $outputFile
if (-not [string]::IsNullOrWhiteSpace($outputDir) -and -not (Test-Path $outputDir)) {
    New-Item -ItemType Directory -Path $outputDir -Force | Out-Null
}

$embedded = @()

if (Test-Path $outputFile) { Remove-Item $outputFile }

function Embed-Includes {
    param(
        [string[]]$lines,
        [string]$basePath
    )

    if ([string]::IsNullOrWhiteSpace($basePath)) {
        $basePath = "."
    }

    foreach ($line in $lines) {
        if ($line -match '^\s*\.\s*["'']?\.\\?([^"'']+\.ps1)') {
            $joinedPath = Join-Path $basePath $matches[1]
            $resolvedItem = Resolve-Path $joinedPath -ErrorAction SilentlyContinue

            if (-not $resolvedItem) {
                Write-Warning "–§–∞–π–ª $($matches[1]) –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Å—Ç–∞–≤–ª—è—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"
                Add-Content $outputFile $line
                continue
            }

            $normalizedPath = (Get-Item $resolvedItem).FullName.Replace('\', '/').ToLowerInvariant()
            Write-Host "DEBUG: Checking for $normalizedPath"
            Write-Host "DEBUG: Current embedded: $($embedded -join ', ')"

            if ($embedded -contains $normalizedPath) {
                Write-Host "‚ö† –ü—Ä–æ–ø—É—Å–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: $normalizedPath"
                continue
            }

            $embedded += $normalizedPath
            Write-Host "üìÑ –í—Å—Ç—Ä–∞–∏–≤–∞—é: $normalizedPath"

            Add-Content $outputFile "`n# --- Start of $normalizedPath ---"
            $content = Get-Content $normalizedPath
            Embed-Includes $content (Split-Path $normalizedPath)
            Add-Content $outputFile "# --- End of $normalizedPath ---`n"
        }
        else {
            Add-Content $outputFile $line
        }
    }
}

Write-Host "üöÄ –ù–∞—á–∞–ª–æ —Å–±–æ—Ä–∫–∏..."
$mainContent = Get-Content $mainScript
Embed-Includes $mainContent (Split-Path $mainScript)

@'
if ($MyInvocation.InvocationName -notmatch "Import-Module") {
    if (Get-Command -Name Main -ErrorAction SilentlyContinue) {
        Main
    } else {
        Write-Host "–í –º–æ–¥—É–ª–µ –Ω–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ Main –¥–ª—è –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞"
    }
}
'@ | Add-Content $outputFile

Write-Host "‚úÖ –ú–æ–¥—É–ª—å —Å–æ–±—Ä–∞–Ω: $outputFile"
