# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–¥—É–ª—è powershell-yaml ---
if (-not (Get-Module -ListAvailable -Name powershell-yaml)) {
    Write-Host "–ú–æ–¥—É–ª—å 'powershell-yaml' –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—ã—Ç–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏..." -ForegroundColor Yellow
    try {
        Install-Module -Name powershell-yaml -Scope CurrentUser -Force -Confirm:$false
        Write-Host "–ú–æ–¥—É–ª—å 'powershell-yaml' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω." -ForegroundColor Green
    }
    catch {
        Write-Error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–æ–¥—É–ª—å 'powershell-yaml'. –í–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É—é—Ç—Å—è –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PowerShell Gallery. –û—à–∏–±–∫–∞: $($_.Exception.Message)"
        exit 1
    }
}

Import-Module powershell-yaml

# === –ó–∞–≥—Ä—É–∑–∫–∞ config.yaml ===
$ConfigFile = "config.yaml"
if (-not (Test-Path $ConfigFile)) {
    Write-Error "‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: $ConfigFile"
    exit 1
}

try {
    $config = Get-Content $ConfigFile | ConvertFrom-Yaml
}
catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ config.yaml: $($_.Exception.Message)"
    exit 1
}

$AutoUpdateEnabled = $true
$LogFile = $null

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è ===
try {
    $AutoUpdateEnabled = [bool]::Parse($config.settings.auto_update_enabled)
    $LogFile = $config.logging.log_file
    $LogFile = Join-Path -Path $PSScriptRoot -ChildPath $LogFile
}
catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $_"
}

. .\includes\Check-ForUpdates.ps1

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
if ($AutoUpdateEnabled) {
    Check-ForUpdates
}


$EnvFile = ".env"

# === –ó–∞–≥—Ä—É–∑–∫–∞ .env (—Ç–æ–ª—å–∫–æ –¥–ª—è —Å–µ–∫—Ä–µ—Ç–æ–≤ Telegram) ===
if (-not (Test-Path $EnvFile)) {
    Write-Error "‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω: $EnvFile"
    exit 1
}

$telegramSecrets = @{}
Get-Content $EnvFile | ForEach-Object {
    $line = $_.Trim()
    if ($line -and $line[0] -ne '#' -and $line -match '^\s*([^=]+)=(.*)') {
        $key = $matches[1].Trim()
        $value = $matches[2].Trim().Replace('"', '"')
        $telegramSecrets[$key] = $value
    }
}

# === –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–∏–ø–æ–≤ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è ===
try {
    $MinFileSizeMB = [int]$config.settings.min_file_size_mb
    $StabilizationCheckIntervalSec = [int]$config.stabilization_strategy.stabilization_check_interval_sec
    $StabilizationTimeoutSec = [int]$config.stabilization_strategy.stabilization_timeout_sec
    $TelegramEnabled = [bool]::Parse($config.settings.telegram_enabled)
    $UseFileSizeStabilization = [bool]::Parse($config.stabilization_strategy.use_file_size_stabilization)
    $AutoUpdateEnabled = [bool]::Parse($config.settings.auto_update_enabled)
    $EnabledModules = @{}
    $config.settings.modules | ForEach-Object { $EnabledModules[$_] = $true }
}
catch {
    Write-Error "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫: $_"
    exit 1
}

$SourceFolder = [System.Environment]::ExpandEnvironmentVariables($config.paths.source_folder)
$TargetFolder = [System.Environment]::ExpandEnvironmentVariables($config.paths.target_folder)
$TempFolder = [System.Environment]::ExpandEnvironmentVariables($config.paths.temp_folder)
$DestinationFolder = $null
if ($config.paths.destination_folder) {
    $DestinationFolder = [System.Environment]::ExpandEnvironmentVariables($config.paths.destination_folder)
}
$Prefix = if ($config.settings.ContainsKey('prefix')) { $config.settings.prefix } else { '' }
$IgnorePrefix = $config.settings.ignore_prefix
$FFmpegPath = [System.Environment]::ExpandEnvironmentVariables($config.ffmpeg.ffmpeg_path)
$VideoExtensions = $config.video_extensions
$SubtitleExtensions = $config.subtitle_extension
$SubtitleExtractLanguages = $config.subtitles.extract_languages

$TelegramBotToken = $telegramSecrets.TELEGRAM_BOT_TOKEN
$TelegramChannelId = $telegramSecrets.TELEGRAM_CHANNEL_ID
$TelegramChatId = $telegramSecrets.TELEGRAM_CHAT_ID

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É—Ç–µ–π ===
foreach ($path in $SourceFolder, $TargetFolder, $TempFolder) {
    if (-not (Test-Path $path)) {
        Write-Error "‚ùå –ü—É—Ç—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: $path"
        exit 1
    }
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ FFmpeg
if (-not (Test-Path $FFmpegPath)) {
    Write-Error "‚ùå FFmpeg –Ω–µ –Ω–∞–π–¥–µ–Ω: $FFmpegPath"
    exit 1
}

. .\includes\Write-Log.ps1

. .\includes\Send-TelegramMessage.ps1

. .\includes\Test-FileSizeStable.ps1

. .\includes\Get-FfmpegConversionStrategy.ps1

. .\includes\Convert-VideoWithProgress.ps1

. .\includes\Copy-ToDestinationFolder.ps1

. .\includes\Convert-Subtitle.ps1

. .\includes\Extract-Subtitles.ps1

# === –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è ===
$Action = {
    $FilePath = $Event.SourceEventArgs.FullPath
    $FileName = $Event.SourceEventArgs.Name
    $Extension = [IO.Path]::GetExtension($FileName).ToLower()

    if (-not (Test-Path -LiteralPath $FilePath)) {
        Write-Log "‚è≠  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –ø–µ—Ä–µ–º–µ—â–µ–Ω –∏–ª–∏ —É–¥–∞–ª–µ–Ω): $FileName" -Pale
        return
    }

    Write-Log "üìÅ –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: $FileName"

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    if ($UseFileSizeStabilization) {
        Write-Log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏–∏: $FileName" -Pale
        if (-not (Test-FileSizeStable -Path $FilePath -StabilizationTimeoutSec $StabilizationTimeoutSec -StabilizationCheckIntervalSec $StabilizationCheckIntervalSec)) {
            Write-Log "‚ö† –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è: $FileName"
            return
        }
    }

    if ($SubtitleExtensions -contains $Extension) {
        if ($EnabledModules['convert-subtitles']) {
            Write-Log "üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—É–±—Ç–∏—Ç—Ä—ã: $FileName" -Pale
            $isSubConverted = Convert-Subtitle -SubtitleFilePath $FilePath -FFmpegPath $FFmpegPath
        }

        if ($EnabledModules['copy-to-destination'] -and $DestinationFolder -and -not $isSubConverted) {
            $msg = Copy-ToDestinationFolder -FilePath $FilePath -DestinationRoot $DestinationFolder

            if ($msg -and -not (Send-TelegramMessage -Message $msg.Trim() -IsTelegramEnabled $TelegramEnabled -BotToken $TelegramBotToken -ChannelId $TelegramChatId)) {
                Write-Log "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: $FileName"
            }
        }
        return
    }

    if ($VideoExtensions -notcontains $Extension) {
        Write-Log "‚ùå –ù–µ –≤–∏–¥–µ–æ: $Extension" -Pale
        return
    }

    $FileSizeMB = (Get-Item -LiteralPath $FilePath).Length / 1MB

    if ($EnabledModules['copy-to-destination']) {
        Write-Log "üì§ –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∏–¥–µ–æ—Ñ–∞–π–ª–∞: $FileName"
        if ($DestinationFolder) {
            $msg = Copy-ToDestinationFolder -FilePath $FilePath -DestinationRoot $DestinationFolder
            
            if ($msg -and -not (Send-TelegramMessage -Message $msg.Trim() -IsTelegramEnabled $TelegramEnabled -BotToken $TelegramBotToken -ChannelId $TelegramChatId)) {
                Write-Log "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: $FileName"
            }
            
            if (-not $msg) {
                if ($Prefix -and $FileName -like "$Prefix*") {
                    $text = "–°–∂–∞—Ç–æ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ"
                }
                else {
                    $text = "–í–∏–¥–µ–æ —Å–∫–∞—á–∞–Ω–æ"
                }

                $msg = "
üé¨ <b>$text</b>

üìÅ <code>$FileName</code>
üì¶ $("{0:F1}" -f $FileSizeMB) –ú–ë
‚è± $(Get-Date -Format 'HH:mm:ss')
                "
                if (-not (Send-TelegramMessage -Message $msg.Trim() -IsTelegramEnabled $TelegramEnabled -BotToken $TelegramBotToken -ChannelId $TelegramChannelId)) {
                    Write-Log "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram –æ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: $FileName"
                }
            }
        }
    }

    if ($IgnorePrefix -and $FileName -like "$IgnorePrefix*") {
        Write-Log "üö´ –ò–≥–Ω–æ—Ä: –ø—Ä–µ—Ñ–∏–∫—Å $IgnorePrefix" -Pale
        return
    }

    if ($EnabledModules['extract-subtitles']) {
        Extract-Subtitles -VideoFilePath $FilePath -Languages $SubtitleExtractLanguages -FFmpegPath $FFmpegPath
    }

    if ($FileSizeMB -lt $MinFileSizeMB) {
        Write-Log "üìâ –ú–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª ($('{0:F1}' -f $FileSizeMB) –ú–ë): $FileName" -Pale
        return
    }

    if ($EnabledModules['convert-video']) {
        $strategy = Get-FfmpegConversionStrategy -LocalInputFile $FilePath

        if ($null -eq $strategy) {
            Write-Log "‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∏–¥–µ–æ–ø–æ—Ç–æ–∫ –≤ —Ñ–∞–π–ª–µ."
            return
        }

        $BaseName = [IO.Path]::GetFileNameWithoutExtension($FileName)
        $OutputFileName = "$Prefix$BaseName.mkv"
        $TempOutput = Join-Path $TempFolder $OutputFileName
        $FinalOutput = Join-Path $TargetFolder $OutputFileName

        try {
            if (Convert-VideoWithProgress -InputFile $FilePath -OutputFile $TempOutput -DecoderCommand $strategy -FFmpegPath $FFmpegPath) {
                if (Test-Path -LiteralPath $TempOutput) {
                    if (Test-Path -LiteralPath $FinalOutput) { Remove-Item -LiteralPath $FinalOutput -Force }
                    Move-Item -LiteralPath $TempOutput $FinalOutput -Force
                    $FinalSizeMB = (Get-Item -LiteralPath $FinalOutput).Length / 1MB
                    Write-Log "‚úÖ‚úÖ‚úÖ –ì–æ—Ç–æ–≤–æ: $OutputFileName ($('{0:F1}' -f $FinalSizeMB) –ú–ë)"
                }
            }
            else {
                Write-Log "‚ùå‚ùå‚ùå –û—à–∏–±–∫–∞ FFmpeg: $OutputFileName"
            }
        }
        catch {
            Write-Log "‚ùå‚ùå‚ùå –û—à–∏–±–∫–∞: $($_.Exception.Message)"
        }
    }
}


# === –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ ===
Write-Log "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω: $SourceFolder"
Write-Log "–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏."

$Watcher = New-Object IO.FileSystemWatcher
$Watcher.Path = $SourceFolder
$Watcher.IncludeSubdirectories = $true
$Watcher.EnableRaisingEvents = $true
$Watcher.Filter = "*.*"

$null = Register-ObjectEvent -InputObject $Watcher -EventName Created -SourceIdentifier "FileCreated" -Action $Action
$null = Register-ObjectEvent -InputObject $Watcher -EventName Renamed -SourceIdentifier "FileRenamed" -Action $Action

try {
    while ($true) { Start-Sleep -Seconds 1 }
}
finally {
    Get-EventSubscriber -SourceIdentifier "FileCreated", "FileRenamed" -ErrorAction SilentlyContinue | ForEach-Object {
        Unregister-Event -SubscriptionId $_.SubscriptionId
    }
    $Watcher.Dispose()
    Write-Log "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
}